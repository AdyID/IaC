name: Deploy to Development

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Run tfsec security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra
          format: json
          out: tfsec-results.json
          soft_fail: true

      - name: Display tfsec results summary
        run: |
          if [ -f tfsec-results.json ]; then
            echo "===== TFSec Security Scan Results ====="
            jq -r '.results[] | "\(.severity | ascii_upcase) - \(.rule_id): \(.description)"' tfsec-results.json | head -10
            echo "===== End of Results ====="
          else
            echo "No security issues found by tfsec"
          fi

      - name: Configure AWS # Would assign the secret keys with OpenID Connect role usually
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Get ECR Repo URL from Terraform
        id: ecr
        run: |
          # Check if terraform state exists and has outputs
          if terraform output -json > /dev/null 2>&1; then
            ECR_URL=$(terraform output -raw ecr_repository_url)
            echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
            echo "Using existing ECR repository: $ECR_URL"
          else
            echo "No Terraform state found. Will create ECR repository during apply."
            # Set a placeholder - will be updated after terraform apply
            echo "ECR_URL=placeholder" >> $GITHUB_ENV
          fi
        working-directory: infra

      - name: Log in to Amazon ECR
        run: |
          if [ "$ECR_URL" != "placeholder" ]; then
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_URL
          else
            echo "Skipping ECR login - repository will be created during terraform apply"
          fi

      - name: Build and Push Docker Image
        if: env.ECR_URL != 'placeholder'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_URL }}:${{ github.sha }}  # commit hash tag for traceability
          cache-from: type=registry,ref=${{ env.ECR_URL }}:cache
          cache-to: type=registry,ref=${{ env.ECR_URL }}:cache,mode=max

      - name: Terraform Apply (Dev)
        run: |
          set +e
          output=$(terraform apply -auto-approve -var-file=dev.tfvars -var="image_tag=$IMAGE_TAG" 2>&1)
          status=$?
          echo "$output"
          if [ $status -ne 0 ]; then
              # Extract the first "Error:" line from Terraform output
              error_msg=$(echo "$output" | grep -m1 "Error:")
              echo "::error ::$error_msg"
              exit $status
          fi
        working-directory: infra

      - name: Get ECR URL after apply
        if: env.ECR_URL == 'placeholder'
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "ECR repository created: $ECR_URL"
        working-directory: infra

      - name: Build and Push Docker Image (after apply)
        if: env.ECR_URL != 'placeholder' && env.ECR_URL != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_URL }}:${{ github.sha }}  # commit hash tag for traceability
          cache-from: type=registry,ref=${{ env.ECR_URL }}:cache
          cache-to: type=registry,ref=${{ env.ECR_URL }}:cache,mode=max
