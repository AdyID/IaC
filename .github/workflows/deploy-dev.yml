name: Deploy to Development

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: 1.12.2

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3

      - name: Configure AWS # Would assign the secret keys with OpenID Connect role usually
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get ECR Repo URL from Terraform
        id: ecr
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_URL

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
            context: .
            push: true
            tags: |
              ${{ env.ECR_URL }}:${{ env.IMAGE_TAG }}
              ${{ env.ECR_URL }}:${{ github.sha }}  # commit hash tag for traceability
            cache-from: type=registry,ref=${{ env.ECR_URL }}:cache
            cache-to: type=registry,ref=${{ env.ECR_URL }}:cache,mode=max

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply (Dev)
        # run: terraform apply -auto-approve -var-file=dev.tfvars -var="image_tag=$IMAGE_TAG"
        run: |
            set +e
            output=$(terraform apply -auto-approve -var-file=dev.tfvars -var="image_tag=$IMAGE_TAG" 2>&1)
            status=$?
            echo "$output"
            if [ $status -ne 0 ]; then
                # Extract the first "Error:" line from Terraform output
                error_msg=$(echo "$output" | grep -m1 "Error:")
                echo "::error ::$error_msg"
                exit $status
            fi
